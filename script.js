var _6_ = 0, _7_ = 0, _8_ = 0, _9_ = 0, _10_ = 0;
var vis_1 = "<br><br><nn>Python. Синтаксис.</nn> <br><br> Кез келген тілді үйрену оның синтаксисін үйренуден басталады. <br><br> <b>Python</b> тілінің синтаксисі мынадай құрылымға ие. <br> Латын әрпінің үлкен және кіші әріптері - А, В, С,...,Х, У, Z, a, b, c, ..., x, y, z <br> цифрлар - 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 <br> Арнайы символдар - +, –, *, &, ^, # және т.б. <br> Қызметтік сөздер - for, if, class, def, print, input және т.б. <br><br>";
var vis_2 = "<span> <b>Идентификаторлар</b> (айнымалылар атауы) – әріппен басталатын цифрлар мен әріптер тізбегі. Идентификатор латын әріптерінен, төменгі сызу таңбасы _k1 және 0 мен 9 арасындағы цифрлардан құралады. Мысалы, A, s25, a1b88, tri_plus_dv, zzz. Python-ның әріптер регистрі үлкен және кіші әріптерге ажыратылып берілген. Мысалы, komp1 және KOMP1 – екеуі екі түрлі айнымалыға жатады. Программада қолданылатын айнымалыларды <b>идентификатор</b> деп атайды. </span> <br><br> <b>Айнымалы</b> – мәні мен типі бар шама. Программамен жұмыс барысында айнымалылардың мәнін өзгертіп отыруға болады. <br><br><b>Қызметтік сөздер</b>. Кейбір атауларды программалау барысында айнымалы ретінде қолдануға болмайды. Мұндай сөздер қызметтік сөздер деп аталады. Мысалы: for, if, class, def және т.б. <br><br>";
var vis_3 = "<b>Python тілінің синтаксисі</b> <br> <ul> <li>Программадағы жолдардың соңына нүкте мен үтір қою міндетті емес.</li> <li>Бірнеше команданы бір жолда нүктелі үтір (;) арқылы жазуға болады.</li> <li>Программа жазу барысында басқа программалау тілдеріндегідей begin..end және {..} жақшалар қолданылмайды. Керек болған жағдайда ондай жақшалардың орнына 4 бос орын немесе табуляция қойылады.</li> </ul>";
var vis_4 = "<pre>     Python-да толыққанды программа жасау үшін программа терезесінде File (Файл) – New File <br> командаларын орындап, жаңа программа жазу алаңын дайындап аламыз. Бұл бетке жазылған <br> программа кодын орындау үшін Run – Run Module командаларын басамыз. Төмендегі программа <br> кодына назар аударайық :</pre>";
var vis_photo = "<img src='images/example.png' class='fi'><img src='images/example2.png'>";
var vis_5 = "Программа кодына түсініктеме берейік: <br> 1. a, b және с айнымалыларының мәні сәйкесінше 4, 12 және 10-ға тең. <br> 2. Үш санның қосындысының мәні а айнымалысына меншіктеледі.<pre>    <b>Меншіктеу</b> – айнымалыға жаңа мән жүктеу. </pre>3. а айнымалысының мәні экранға шығады.<br><br>"
var vis_6 = "<span> <b>Сызықтық алгоритм (программа)</b> дегеніміз – тармақталу, қайталану әрекеттері жоқ, әрекеттердің тізбектей орындалуын сипаттайтын алгоритм </span> <br><br> <table> <thead> <tr><th colspan='2'>Амалдар</th></tr> </thead> <tbody> <tr><td>x + y</td> <td>қосу</td> </tr> <tr> <td>x - y</td> <td>азайту</td> </tr> <tr> <td>x * y</td> <td>көбейту</td> </tr> <tr> <td>x / y</td> <td>бөлу</td> </tr> <tr> <td>x // y</td> <td>бүтін бөлік</td> </tr> <tr> <td>x % y</td> <td>қалдық</td> </tr> </tbody> </table> <pre>    Өрнек амалдардың қай ретпен орындалатынын көрсетеді. Өрнек айнымалы мен тұрақты <br> шамалардан, жақшалар мен амалдардан құралады. Мысалы, (а + b + 5) * с. <br><pre>    <b>іnput()</b> функциясы программаға жолдық деректерді енгізеді. Ал сандық дерек енгізу үшін бұл <br> функция <b>int(input())</b> түрінде жазылады.</pre>";
var vis_photo2 = "1-ші мысал : <br><img src='images/example3.png' class='fi'><img src='images/example4.png'> <br><br> 2-ші мысал : <br> <img src='images/example5.png'><img src='images/example6.png'> <br> <pre>    1-мысалда a және b айнымалыларының мәндері жол ретінде қарастырылады. Қосу амалы екеуін <br> біріктіріп, экранға шығарады. Ал 2-мысалда программа екі айнымалының мәнін бүтін сан <br> <b>(int, integer – бүтін сан)</b> деп қабылдап, олардың қосындысын шығарады. </pre>";
var vis_7 = "</pre>Деректердің типтері <br><br> <b>Дерек</b> – өңделмеген әртүрлі фактілер, цифрлар. Өңдеудің нәтижесінде белгілі бір мағынаға ие болған дерек ақпаратқа жатады. Төменгі сыныптарда ақпаратты ұсынудың мәтіндік, сандық, дыбыстық және графикалық түрлерімен танысқанбыз. Программалау тілдерінің көмегімен деректерді өңдеу үшін оларды типтерге жіктейді. Сандық ақпарат сандық деректерден құрылады. Математикада сандар осінде орналасқан сандарды натурал, бүтін, нақты және т.б. түрлерге жіктейді. Ал мәтіндік ақпарат – символдық және жолдық деректерден құралады. Деректердің жіктелуі оларды компьютерде өңдеу кезінде маңызды рөл атқарады. <br><br> <span>Тұрақты, айнымалы және өрнектер қабылдай алатын мәндерді, олармен орындауға болатын амалдардың жиынтығын деректер типі деп атайды</span> <br> Python-да қолданылатын деректер бүтін сан, нақты сан, жолдық және логикалық типтердің біріне жатады.";
var vis_8 = "<table> <thead> <tr><th>Типтің атауы</th> <th>Типтің атауы</th> <th>Қабылдайтын мәндері</th></tr> </thead> <tbody> <tr> <td> int() </td> <td> Бүтін сандар </td> <td> –27885; –156; 25; 152 </td> </tr> <tr> <td> float() </td> <td> Нақты сандар </td> <td> 25.56; 5.0; –365.5633 </td> </tr> <tr> <td> str() </td> <td> Жолдық </td> <td> '1vdkdv', 't' </td> </tr> <tr> <td> Bool() </td> <td> Логикалық </td> <td> True, False </td> </tr> </tbody> </table> <br><br>";
var _6class_infos = vis_1 + vis_2 + vis_3 + vis_4 + vis_photo + vis_5 + vis_6 + vis_photo2 + vis_7 + vis_8;

var vis1_1 = "<br><br><nn>Тармақталған алгоритмдерді программалау.</nn> <br><br> <span><b>Тармақталған алгоритм</b> – орындалуы керек қадам белгілі бір шарттың орындалу немесе орындалмауына байланысты жүзеге асырылатын алгоритм.</span> <br> Тармақталған алгоритмде «егер», «онда», «әйтпесе» түйінді сөздері қолданылады. Тармақталған алгоритмде міндетті түрде шарт қолданылады. <br><br> <span><b>Шарт</b> дегеніміз – тексеру нәтижесінде <b>«иә»</b> (ақиқат) немесе <b>«жоқ»</b> (жалған) логикалық мәндерін қабылдайтын логикалық өрнек немесе пікір.</span> <br><br> Python программалау тілінде де шарт тексеруге арналған арнайы <b>if - else</b> операторы қолданылады. Ағылшынның <b>«if»</b> сөзі <b>«егер»</b>, ал <b>«else»</b> сөзі <b>«әйтпесе»</b> мағынасын береді. <b>if</b>-тен кейін шарт жазылады. Егер шарт орындалса, яғни ақиқат болса, онда көрсетілген команданы орындауға көшеді. Шарт тексеру үшін төмендегі салыстыру операторлары қолданылады. <br><br> ";
var vis1_2 = "<table> <thead> <tr> <th> Оператор </th> <th> Мағынасы </th> <th> Жазылуы </th> </tr> </thead> <tbody> <tr> <td> == </td> <td> Тең </td> <td> x == y </td> </tr> <tr> <td> != </td> <td> Тең емес </td> <td> x != y </td> </tr> <tr> <td> > </td> <td> Үлкен </td> <td> x > y </td> </tr> <tr> <td> < </td> <td> Кіші </td> <td> x < y </td> </tr> <tr> <td> >= </td> <td> Үлкен немесе тең </td> <td> x >= y </td> </tr> <tr> <td> <= </td> <td> Кіші немесе тең </td> <td> x <= y </td> </tr> </tbody> </table> <br>";
var vis1_3 = "<pre>Мысалы : <br>               if a==b: <br>                    k=a+b<br>               if a>=b: <br>                   k=a*b<br>               if a<=b:<br>                   k=a – b </pre>";
var vis1_4 = "Шарт тексеру операторының туындайтын шарттардың күрделілігіне қарай үш түрлі құрылымы бар. Біз әзірге екі құрылыммен ғана танысамыз. <br><br> Шарт тексеру операторының жазылу құрылымдары <br> 1. <b>Шарт тексеру операторының қысқа жазылу түрі.</b> if операторынан кейін шарт міндетті түрде жазылады. Шарттан кейін қос нүкте «:» қойылады. 1-командалар блогы тек шарт ақиқат «иә» болғанда орындалады. Ал 2-командалар блогы кез келген жағдайда орындалады. <br><br> <b>2. Шарт тексеру операторының толық жазылу түрі.</b> Шарт тексеру операторының қысқа жазылу түрі тек туындаған шарттың ақиқаттығын тексереді. Шарт жалған болған кездегі орындалуы керек қадамды көрсетпейді. Ол үшін шарт тексеру операторының if – else толық құрылымы қолданылады. <br><br> Шарт тексеру операторының толық жазылу түрін өзімізге түсінікті, қарапайым тілде төмендегіше оқуға болады: «Егер қойылған шарт орындалса, онда 1-команда немесе командалар блогын орында, әйтпесе 2-команда немесе командалар блогын орында». <br><br>";
var vis1_5 = "Шарттармен жұмыс істеу барысында екіден көп тармақтардан тұратын шарттармен жұмыс істеуге тура келеді. Мұндай шарттарды орындау үшін бірнеше шарт тексеру операторы қажет. <br><br> <span>Шарт тексеру операторының құрамында екінші шарт тексеру операторы қолданылса, онда мұндай шарт тексеру – <b> кірістірілген шарт </b> тексеру деп аталады. </span> <br> мысал: <br><br>if 1-шарт: <br><tab>1-командалар блогы</tab> <br> else: <br> <tab>if 2-шарт: <br><tab><tab>2-командалар блогы</tab></tab> </tab><br><tab>else: <br> <tab><tab>3-командалар блогы</tab></tab></tab> <br><br> if 1-шарт: <br> <tab> if 2-шарт </tab>: <br><tab><tab>1-командалар блогы </tab></tab> <br> <tab> else: </tab> <br> <tab><tab>2-командалар блогы </tab></tab> <br><br> Шартты операторларға мысалдар:<br><br> <div class='imgs'> <div class='img1'></div> <div class='img2'></div> </div> <br><br>";
var _7class_infos = vis1_1 + vis1_2 + vis1_3 + vis1_4 + vis1_5;

var vis2_1 = "<br><br><nn>Параметрлі циклдер. for операторы.</nn> <br><br> Программалаудағы цикл түрлері <br><br> Программалауда циклдердің маңызы үлкен. Олардың көмегімен табиғатта кездесетін барлық цикл түрлерінің алгоритмін құрастырып, компьютерде моделін алуға болады. Бірнеше рет қайталанатын белгілі алгоритмдер тобы циклдік алгоритмдерге жатады. Циклдік алгоритмдерді пайдалануда программалау тілінің операторы түрінде оны қысқаша жазу мүмкіндігі болады. Программалау тілдерінде циклдік алгоритмдерді программалау тіліне аударатын арнайы операторлар бар. Циклдік операторлар қолдану түріне қарай екі түрге жіктеледі <br><br> <pre>Программалаудағы цикл түрлері:<br>     1. <b>Арифметикалық цикл</b>: Орындалу саны белгілі цикл (for)<br>    2. <b>Қадамдық (итерациялық) цикл</b>: Орындау саны белгісіз цикл (whіle)</pre>";
var vis2_2 = "<span> <b>Цикл денесі</b> - бірнеше рет орындауды қажет ететін код тізбегі. <br> <b>Итерация</b> - бұл цикл денесінің орындалуы. </span> <br> Python тілінде екі цикл операторы бар: fоr және while. <br><br> Python тілінде <b>for</b> параметрлі цикл операторы мына түрде жазылады: <pre>for <цикл параметрі> іп <тізбек атауы немесе range() функциясы>:<br>    цикл денесі</pre> <br><br> for параметрлі цикліне мысал қарастырайық. Salem! сөзін 5 рет экранға шығару қажет. <br><br> <img src='images/example7.png'><img src='images/example8.png'> <br><br> Біз аралық ретінде 5 санын көрсеттік. Бұл жағдайда цикл параметрі і = 0, 1, 2, 3, 4 деген мәндерді қабылдайды. range() функциясы 1, 2 немесе 3 аргументтен тұруы мүмкін: <br> <b>range(A)</b> - 0-ден A=1-ге дейін тізбек құру. <br> <b>range(А, В)</b>- А-дан B-1-ға дейін тізбек құру. <br> <b>range(А, В, N)</b> - N қадаммен A дан B-1-ге дейін тізбек құру. <br>";
var vis2_3 = "<br>Python-дағы <b>while</b> циклінің жазылу синтаксисі:<pre>while (шарт):<br>    операторлар блогы</pre> <b>while</b> циклінде циклден шығу шартымен байланысты және цикл ішінде өзгеретін айнымалы болуы тиіс. Бұл айнымалы цикл параметрі немесе санауыш деп аталады. Цикл орындалмас бұрын цикл параметріне бастапқы мәнді меншіктеу керек. <br><br> while параметрлі цикліне мысал қарастырайық. Salem! сөзін 5 рет экранға шығару қажет. <br><br> <img src='images/example9.png'><img src='images/example8.png'> <br><br> Кейбір жағдайларда: циклдің қайталану шарты дұрыс берілмегенде немесе цикл параметрі өзгермегенде циклдің ішінде шырғалану пайда болады. Мұндай жағдайларда циклден шығу орындалмайды және программа шексіз орындалады. Қажет болған жағдайларда шексіз циклді модельдеу керек. Бұл тәсілді ұзақ уақыт орындалуы үшін пайдалануға болады. <br><br>";
var _8class_infos = vis2_1 + vis2_2 + vis2_3;

var vis3_1 = "<br><br> <nn>Бірөлшемді массив.</nn> <br><br> «Массив» деген жаңа ұғымды оқып-үйренуді бастайық. Бұған дейін біз айнымалылармен, деректер типімен, яғни int – бүтін, float – нақты бөлшектер, str – символдық және т.б. мәндерді қабылдайтынымен танысқанбыз. Әр бір айнымалы типі белгілі бір типтің деректерін сақтайды және компьютер жадынан өзіне тиіс көлемде орын алады. Мысалы, int жадыдан 1-ден 4 байтқа дейін орын алуы мүмкін. Бірөлшемді және көпөлшемді массивтер бар.<br><br> <span><b>Массив</b> – бір атаумен біріктірілген, бір типтегі деректер ден тұратын айнымалылардың жиынтығы. Әрбір алынған жеке айнымалы массив элемен ті деп аталады. <b>Массив</b> элементтері индекстер арқылы белгіленеді, индекстер тік жақшаның ішінде жазылады және олар нөлден бастап нөмірленеді. Сондықтан да массивтерді кейде индексі бар айнымалы деп атайды.</span><br><br><span><b>Бірөлшемді массив</b> – бір атауға біріктірілген бірнеше бір типтес элементтерден тұратын жиын. Әрбір элементтің өзінің реттік нөмірі болады</span>";
var vis3_2 = "<br><br> <span><b>Реттік нөмір</b> – массив элементінің индексі. Массив элементтері бірінен соң бірі ретпен орналасады.</span> <br><br> Массивті жариялаған кезде массивтің атауын, массив элементтерінің типін көрсетеміз. Массивтің өлшемі көрсетілмейді, ол кез келген уақытта жаңа элементтерді қосу арқылы кеңейтілуі мүмкін. Массивті Python-да пайдалану үшін array стандартты модулін импорттау қажет. <br><br> <b>Python программасындағы қызметтік сөздер:</b><br> 'and', 'or', 'in', 'is', 'not', 'if', 'else', 'elif', 'assert', 'break', 'continue', 'def', 'del', 'for', 'from', 'while', 'yield', 'import', 'print', 'return'. <br><br> <span><b>Модуль</b> – функцияларды, нысандарды, кластарды қамтитын дайын программалар.</span> <br> Мысалы: <br> import array as arr <br> a = arr.array('i') <br><br> мұндағы arr – array модулін әрі қарай пайдалану үшін өзіміз қойған атау; <br> a – қазіргі жағдайдағы массив атауы; <br> i – массив элементінің типі (integer). <br><br> Массивтің әрбір элементі массив атауы мен оның элементінің индексін көрсету арқылы шақыра аламыз <br><br>";
var vis3_3 = "<div class='massiveex'></div><br><br> # массивті жариялау a <br> a = arr.array('i') <br><br> Массив оның элементтерінің типін көрсету арқылы жарияланады, біздің жағдайда бұл – бүтін (int), содан кейін оның аты көрсетіледі, бұл – a. Массивтің 8 элементтен тұрға ны ыңғайлы. Мәндерді өзгерту арқылы массивті инициализа циялау керек. Оны массивтің барлық элементтеріне дәйекті түрде өтетін цикл арқылы орындау оңай. і * 2 - 1 форму ласын қолдана отырып инициализациялаймыз, мұндағы i – массивиндексінің мәні. <br><br> #циклде  массивтің барлық элементтерін толтыру <br> for i in range(0,10): <br><tab>testArray.append(i)</tab> <br><br> #массивтің барлық элементтерін шығару циклі <br> for i in range(0,10): <br><tab>print(testArray[i])</tab> <br><br> Массивтер бір-екі айнымалымен жұмыс істеуге болмайтын жағдайларда, яғни бір типті элементтердің белгілі бір тізбегі болған кезде қолданылады. Мысалы, пайдаланушы белгілі бір орынмен, ретпен, басында немесе ортасында ауысуға, олардың мәндерін орындарымен ауыстыруға, өсу/кему және т.б. бойынша сұрыптауға тиіс.<br><br> Барлығын жақсы игеру үшін төмендегі мысалдың программасын қарастырайық:";
var vis3_4 = "<br><br>#программа пән бойынша қойылған бағаларды сұрыптайды <br>point1 = input('Bagany engiz: ') <br>point2 = input('Bagany engiz: ')<br>point3 = input('Bagany engiz: ') <br>point4 = input('Bagany engiz: ')<br>point5 = input('Bagany engiz: ') <br>print('Kelesі bagalar engizildі: ') <br> print(point1+'/t',point2+'/t',point3+'/t', point4+'/t', point5+'/t') <br><br> Нәтиже:<br><br> <img src='images/example10.png'> <br><br> Жоғарыда келтірілген программа пайдаланушыға бес айнымалы бойынша сақталатын бес бағаның нәтижесін сұрайды: <br> point1, point2, point3, point4, point5; <br><br> Енді осы программаның нұсқасын массивті пайдалану арқылы жасап көрейік: <br><br> import array as arr<br> point = arr.array('i')<br>for i in range(0,5):<br><tab>point.append(int(input('Bagany engiz: ')))</tab>  #  input  әрқашан  str  типтеріне  деректерді  қайтарады, сондықтан int() функциясы санға түрлендіру үшін пайдаланылады. <br>print('Kelesі bagalar engizildі: ') <br> for i in range(0,5): <br><tab>print(point[i], end='/t')</tab><br><br> Берілген программа да алғашқы нұсқамен бірдей нәтиже береді, бірақ бұл жерде қысқаша келтірілген. Программалау нұсқасы массивтің қолданылуына байланысты ыңғайлы және ықшамды болып табылады. <br><br>";
var vis3_5 = "Массивтің түрлері: <br> - бірөлшемді <br> - екіөлшемді немесе матрица <br><br> <span>Mассивтің ­элементтерін ­нөмірлеу­ нөлден­ басталады мысалы, ­егер бізде ­бес элементтен тұратын ­массив­ болса, ­онда­ оларға ­мынадай ­жолмен қол­ жеткізуге ­болады: a[0]; a[1]; a[2]; a[3]; a[4];</span> <br><br> Массивті <b>инициализациялауды</b> бірнеше жолмен орындауға болады. Мысалы, int деп жариялағанда: <br><br> numbers_array  =  arr.array('i',  [7,  -5,  9,  1,  0, -2, 4, 3, 6, 8]) <br><br> Numbers_array  массивінде 10 элемент бар. Массивтің өлшемін len () функциясын қолдану арқылы табуға болады: len(numbers_array) <br><br>";
var _9class_infos = vis3_1 + vis3_2 + vis3_3 + vis3_4 + vis3_5;

var vis4_1 = "<br><br><nn>Сұрыптау әдістері</nn> <br><br> <span> <b>Сұрыптау</b> (селекция; selection; сортировка; sorting) – массив элементтерін белгілі бір заңдылықпен орындарын ауыстырып реттеу процесі. Мысалы, сандар массивін өсуі, кемуі бойынша сұрыптау, жолдар массивін алфавит бойынша сұрыптау, т.б. Сұрыптаудың негізгі мақсаты – сұрыпталған жиыннан керек элементтерді іздеуді жеңілдету. Сұрыптауды көбіне массивтерді және файлдарды сұрыптағанда көп қолданады. Бұл екеуін әдетте ішкі және сыртқы сұрыптаулар деп атайды. </span><br><br> Массивтер «ішкі» (жедел) жадында орналасатындықтан, <b>ішкі сұрыптау</b> болады. Ішкі сұрыптау жадта жылдам орындалады, ал файлдарды сұрыптау бұдан бәсеңдеу орындалады. <br><br> Сұрыпталатын файлдар сыйымдылығы үлкендеу «сыртқы» жадтағы есте сақтау құрылғыларында (диск, лента, т.б.) сақталатындықтан, оны <b>сыртқы сұрыптау</b> деп атаймыз. <br><br> <div class='imgs'><img src='images/sortingex.png'></div> <br><br> <div class='imgs2'> <img src='images/example13.png'> <img src='images/example14.png'> </div> <br><br> <span> <b>Жылдам сұрыптау</b> (быстрая сортировка; Quick Sort) – сұрыптау әдістерінің арасында ең жылдам сұрыптаушы алгоритмдердің бірі. Quick Sort көмегімен сандық элементтерді өсу немесе кему ретімен, мәтіндік массив элементтерін алфавит ретімен сұрыптайды. </span> ";
var vis4_2 = "<br><br><table> <thead> <tr> <th> Сұрыптау түрі </th> <th> Программалық коды </th> <th> Түсініктеме </th> </tr> </thead> <tbody> <tr> <td> Өсу ретімен </td> <td> B = sorted( A ) </td> <td> А массивін сұрыптап, В массивіне жүктейді. </td> </tr> <tr> <td> Өсу ретімен </td> <td> A.sort() </td> <td> А массивінің өзінде реттейді. </td> </tr> <tr> <td> Кему ретімен </td> <td> B= sorted( A, reverse = True ) </td> <td> А массивін сұрыптап, В массивіне жүктейді. </td> </tr> <tr> <td> Кему ретімен </td> <td> A.sort(reverse = True) </td> <td>  А массивінің өзінде реттейді. </td> </tr> </tbody> </table> <br><br> Сұрыптау әдістерін қолданудың жолдарын үйрену үшін мысалдар қарастырайық. <br><br> 1-мысал. А[N] бірөлшемді массив берілген (0 <N<106). <br> Осы массивте әртүрлі элементтердің санын экранға шығар. <br><br> <img src='images/example15.png' width='95%'> <br><br> Массивте неше әртүрлі элемент барын анықтау үшін, массивті өсуі не кемуі бойынша сұрыптап аламыз. Бұл сұрыптау үшін <b>Жылдам сұрыптауды (Quick Sort)</b> пайдаланамыз. Реттелген массивтің қатар тұрған 2 элементін салыстырамыз. Есептің нәтижесін алу үшін қатар тұрған екі элементтің бір-біріне тең болмаған жағдайларын санасақ жеткілікті <br><br> Егер жұмыс жылдамдығы орташа компьютерлер 1 секундта жобамен 1000000 амал орындайтынын ескерсек, онда жоғарыда қарастырылған жағдайда 1000000 элементтің арасынан әртүрлі элементтер санын анықтауға 2 секунд уақыт керек болады. Оның 1 секунды массивті сұрыптау үшін, 1 секунды реттелген массивте тең емес элементтерді анықтау үшін қажет. Сұрыптауды тек массивтегі сандарға қолданбайды, сонымен бірге жолдарды, жолдық массивтерді алфавит бойынша сұрыптауға да болады. Төмендегі мысалды қарастырайық. <br><br> Осы кодтың жеңіл және тиімсіз түрі: <br><br> <img src='images/example16.png' width='95% '> <br><br>";
var _10class_infos = vis4_1 + vis4_2;

function _6class() {    
    if (_6_ % 2 == 0) {
        document.getElementById("txt").innerHTML = _6class_infos;
    } else {
        document.getElementById("txt").innerHTML = "";
    }
    _6_++;
}

function _7class() {
    if (_7_ % 2 == 0) {
        document.getElementById("txt1").innerHTML = _7class_infos;
    } else {
        document.getElementById("txt1").innerHTML = "";
    }
    _7_++;
}

function _8class() {
    if (_8_ % 2 == 0) {
        document.getElementById("txt2").innerHTML = _8class_infos;
    } else {
        document.getElementById("txt2").innerHTML = "";
    }
    _8_++;
}

function _9class() {
    if (_9_ % 2 == 0) {
        document.getElementById("txt3").innerHTML = _9class_infos;
    } else {
        document.getElementById("txt3").innerHTML = "";
    }
    _9_++;
}

function _10class() {
    if (_10_ % 2 == 0) {
        document.getElementById("txt4").innerHTML = _10class_infos;
    } else {
        document.getElementById("txt4").innerHTML = "";
    }
    _10_++;
}